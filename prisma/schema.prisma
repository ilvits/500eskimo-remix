// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ProductStatus {
  published
  hidden
  draft
  archived
}

model Users {
  id        Int      @id @default(autoincrement())
  role      Role     @default(USER)
  username  String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([username], map: "username_idx")
}

model Customers {
  id        Int        @id @default(autoincrement())
  role      Role       @default(USER)
  username  String?
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  Orders    Orders[]
  Messages  Messages[]

  @@index([username], map: "customer_username_idx")
}

model Categories {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  Products    Products[]
}

model Tags {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique
  color String
}

model Products {
  id              Int               @id @default(autoincrement())
  categoryId      Int
  tagIds          String[]
  title           String
  slug            String
  description     String?
  conditions      String?
  callories       Int?
  protein         Int?
  fat             Int?
  carbs           Int?
  cover           String?
  cover_public_id String?
  rating          Int?
  numReviews      Int?
  freeDelivery    Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  productStatus   ProductStatus     @default(draft)
  productVariants ProductVariants[]
  category        Categories        @relation(fields: [categoryId], references: [id])
  productImages   ProductImages[]
}

model ProductVariants {
  id            Int             @id @default(autoincrement())
  name          String          @default("")
  productId     Int
  optionValueId Int
  quantity      Int
  price         Decimal
  sku           String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  options       Options[]
  product       Products        @relation(fields: [productId], references: [id])
  optionValue   OptionValues    @relation(fields: [optionValueId], references: [id])
  productImages ProductImages[]
}

model Options {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  optionValues    OptionValues[]
  productVariants ProductVariants[]
}

model OptionValues {
  id              Int               @id @default(autoincrement())
  optionId        Int
  option          Options           @relation(fields: [optionId], references: [id])
  value           String
  unit            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  productVariants ProductVariants[]
}

model ProductImages {
  id               Int              @id @default(autoincrement())
  productId        Int
  product          Products         @relation(fields: [productId], references: [id])
  productVariantId Int?
  productVariant   ProductVariants? @relation(fields: [productVariantId], references: [id])
  imageUrl         String
  publicId         String?
}

model Orders {
  id             Int          @id @default(autoincrement())
  userId         Int
  status         String
  total          Decimal
  deliveryMethod String
  deliveredAt    DateTime
  delivered      Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  OrderItems     OrderItems[]
  Customers      Customers?   @relation(fields: [customersId], references: [id])
  customersId    Int?

  @@index([status], map: "status_idx")
  @@index([total], map: "total_idx")
  @@index([userId], map: "user_id_idx")
  @@index([deliveredAt], map: "delivered_at_idx")
  @@index([delivered], map: "delivered_idx")
  @@index([deliveryMethod], map: "delivery_method_idx")
  @@index([createdAt], map: "created_at_idx")
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  order     Orders   @relation(fields: [orderId], references: [id])
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())

  @@index([orderId], map: "order_id_idx")
  @@index([productId], map: "product_id_idx")
  @@index([quantity], map: "quantity_idx")
}

model Messages {
  id          Int        @id @default(autoincrement())
  userId      Int
  name        String
  email       String
  subject     String
  phone       String
  body        String
  createdAt   DateTime   @default(now())
  Customers   Customers? @relation(fields: [customersId], references: [id])
  customersId Int?
}
